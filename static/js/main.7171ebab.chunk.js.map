{"version":3,"sources":["BooksAPI.js","bookcover.js","bookshelf.js","bookdetails.js","Book.js","shelf.js","searchinput.js","search.js","App.js","serviceWorker.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","getAll","books","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","BookCover","props","thumbnailURL","react_default","a","createElement","className","style","width","height","backgroundImage","BookShelf","defaultValue","onChange","e","onUpdateShelfHandler","target","value","disabled","BookDetail","title","authors","length","join","Book","onUpdateShelfHandle","imageLinks","thumbnail","bookcover","bookshelf","bookObj","oldShelf","newShelf","bookdetails","Shelf","name","onUpdateShelf","map","key","src_Book","SearchInput","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","newQuery","setState","inputValue","searchHandler","state","react_router_dom","to","placeholder","type","Component","Search","handleQuery","existingBooks","BooksAPI","trim","booksArray","error","modifiedBooksArray","shelfizedBooks","prevStat","searchedBooks","shelfHandler","_this2","_this$state","modifiedSearchBooks","searchinput","textAlign","color","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","found","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","existingBook","err","return","push","App","fetchBooks","_App$categorizeBooks","categorizeBooks","currentlyReading","wantToRead","read","updateShelfLocal","prevState","defineProperty","filter","_this$state$oldShelf$","extractBook","slicedToArray","_ref2","toConsumableArray","updateShelfOnly","console","log","updateShelfRemote","newBooks","_App$categorizeBooks2","react_router","exact","path","render","src_shelf","src_search","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7171ebab.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)","import React from 'react';\r\n\r\nfunction BookCover(props){\r\n    \r\n    const {thumbnailURL} = props;\r\n\r\n    return(\r\n        <div className=\"book-cover\" style={\r\n         { width: 128, height: 193, backgroundImage:\r\n         `url('${thumbnailURL}')`  }} />     \r\n    );\r\n}\r\n\r\n\r\nexport default BookCover;\r\n","import React from 'react';\r\n\r\nfunction BookShelf(props){\r\n\r\n    const handleChange = (e) => {\r\n        const {id,shelf,onUpdateShelfHandler} = props;\r\n        const newShelf = e.target.value;\r\n        \r\n        onUpdateShelfHandler({id},shelf,newShelf);\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"book-shelf-changer\">\r\n\r\n            <select defaultValue={props.shelf} onChange = {handleChange}>\r\n                <option disabled >Move to...</option>\r\n                <option value = '' ></option>\r\n                <option value = 'currentlyReading'>Currently Reading</option>\r\n                <option value = 'wantToRead'>Want to Read</option>\r\n                <option value = 'read'>Read</option>\r\n                <option value = 'none'>None</option>\r\n            </select> \r\n\r\n        </div>\r\n    );\r\n}\r\nexport default BookShelf;","import React from 'react';\r\n\r\nfunction BookDetail(props){\r\n    \r\n    const {title,authors} = props;\r\n\r\n    return(\r\n        <div>\r\n            <div  className=\"book-title\">{title}</div>\r\n\r\n            <div className=\"book-authors\">\r\n                {(authors && authors.length> 0)?\r\n                (authors.join(', ')):'Unknown Author'}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default BookDetail;","import React from 'react';\r\nimport BookCover from './bookcover';\r\nimport BookShelf from './bookshelf';\r\nimport BookDetail from './bookdetails';\r\n\r\n\r\nfunction Book(props){\r\n    \r\n    \r\n    const {book,onUpdateShelfHandle} = props;\r\n    const {authors,id,imageLinks,shelf,title} = book;\r\n    const {thumbnail} = imageLinks || \r\n        ({thumbnail:\r\n            'https://d2ofpir5gh0cbr.cloudfront.net/files/2017-11/carousel-01.jpg'});\r\n    \r\n\r\n    const shelfHandler = (bookObj,oldShelf,newShelf) =>\r\n            onUpdateShelfHandle(bookObj,oldShelf,newShelf);\r\n\r\n\r\n    return(\r\n        <div  className=\"book\">\r\n\r\n            <div className=\"book-top\">\r\n                <BookCover thumbnailURL={thumbnail} />\r\n            \r\n                <BookShelf id = {id} shelf = {shelf} \r\n                onUpdateShelfHandler ={shelfHandler}\r\n                />\r\n            </div>\r\n\r\n            <BookDetail authors = {authors} title = {title} />\r\n\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Book;","import React from 'react';\r\nimport Book from './Book';\r\n\r\nfunction Shelf(props){\r\n\r\n    const {books,name, onUpdateShelf} = props;\r\n    \r\n    const onUpdateShelfHandler = (bookObj,oldShelf,newShelf) => \r\n        onUpdateShelf(bookObj,oldShelf,newShelf);\r\n     \r\n\r\n    return(\r\n\r\n        <div className=\"bookshelf\">   \r\n\r\n            <h2 className=\"bookshelf-title\">{name}</h2>\r\n\r\n            <div className=\"bookshelf-books\">\r\n                \r\n                <ol className=\"books-grid\">\r\n                    \r\n                    {books.length>0 && (books.map(bookObj => (\r\n                        <li key = {bookObj.id}>\r\n                            <Book book = {bookObj} onUpdateShelfHandle =\r\n                            {onUpdateShelfHandler} />\r\n                        </li> )\r\n                    ))}\r\n\r\n                </ol>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Shelf;","import React,{Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass SearchInput extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inputValue:''\r\n        };\r\n    }\r\n\r\n\r\n    updateQuery = (e) => {\r\n        const newQuery = e.target.value;\r\n        \r\n        this.setState({\r\n            inputValue:newQuery\r\n        });\r\n\r\n        this.props.searchHandler(newQuery);\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className = 'search-books-bar'>\r\n                <Link to = '/' className = 'close-search'>\r\n                    Go Home\r\n                </Link>\r\n                \r\n                <div className = 'search-books-input-wrapper'>\r\n                    <input placeholder = 'Search Books' value = {this.state.inputValue}\r\n                     type = 'text' onChange = {this.updateQuery} />\r\n                 </div>\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchInput;","import React,{Component} from 'react';\r\nimport * as BooksAPI from './BooksAPI';\r\nimport Book from './Book'\r\nimport SearchInput from './searchinput';\r\n\r\n\r\nclass Search extends Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchedBooks:[],\r\n            error:false\r\n        };\r\n    }\r\n\r\n\r\n    static shelfizedBooks = (booksArray,existingBooks) => {\r\n        const modifiedBooksArray = [];\r\n\r\n        for(let book of booksArray){\r\n            let found = false;\r\n            for(let existingBook of existingBooks)\r\n                if (book.id === existingBook.id){\r\n                    book.shelf = existingBook.shelf;\r\n                    found = true;\r\n                    break;\r\n                }\r\n            \r\n            if(!found)\r\n                book.shelf = 'none';\r\n                        \r\n            modifiedBooksArray.push(book);    \r\n        }\r\n\r\n        return modifiedBooksArray;\r\n    }\r\n\r\n\r\n    handleQuery = (query) => {\r\n        if (query === '')\r\n            return;\r\n        \r\n        const {existingBooks} = this.props;\r\n\r\n        BooksAPI.search(query.trim())\r\n            .then(booksArray => {\r\n                const {error} = booksArray;\r\n                \r\n                if(error){\r\n                    this.setState({\r\n                        error:true\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                const modifiedBooksArray = \r\n                                Search.shelfizedBooks(booksArray,existingBooks)\r\n\r\n                this.setState(prevStat => ({searchedBooks:modifiedBooksArray,\r\n                    error:prevStat.error?false:prevStat.error}));\r\n\r\n            });\r\n    }\r\n\r\n\r\n    shelfHandler = (bookObj,oldShelf,newShelf) => {\r\n        const {onUpdateShelf} = this.props;\r\n        onUpdateShelf(bookObj,oldShelf,newShelf);\r\n    }\r\n\r\n\r\n    render(){\r\n        const {existingBooks} = this.props;\r\n        const {searchedBooks,error} = this.state;\r\n\r\n        const modifiedSearchBooks = \r\n                        Search.shelfizedBooks(searchedBooks,existingBooks)\r\n        \r\n\r\n        return(\r\n            <div className = 'search-books'> \r\n\r\n                <SearchInput searchHandler = {this.handleQuery} />\r\n                {!error? (\r\n                <div className=\"search-books-results\">\r\n                    \r\n                    <ol className=\"books-grid\">\r\n                        {modifiedSearchBooks.length>0 && \r\n                        (modifiedSearchBooks.map(bookObj => (\r\n                            <li key = {bookObj.id}>\r\n                                <Book  book = {bookObj} onUpdateShelfHandle =\r\n                                 {this.shelfHandler} />\r\n                             </li>)\r\n                        ))}\r\n                    </ol>\r\n\r\n                </div>):(\r\n                    <div className=\"search-books-results\">\r\n\r\n                        <h2 className=\"bookshelf-title\"\r\n                            style = {{textAlign:'center',color:'red'}}>\r\n                            No relevant books found\r\n                        </h2>\r\n\r\n                    </div>\r\n                )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Search;","import React,{Component} from 'react';\nimport {Route,Link} from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport Shelf from './shelf';\nimport Search from './search';\nimport './App.css';\n\n\nclass App extends Component{\n  \n\n    constructor(props){\n        super(props);\n        this.state = {\n          books:[],\n          currentlyReading:[],\n          read:[],\n          wantToRead:[]\n        };\n    }\n\n\n    static categorizeBooks = (books) => {\n\n      const currentlyReading = books.filter(bookObj =>\n                    (bookObj.shelf === 'currentlyReading'));\n      const wantToRead = books.filter(bookObj => \n                    (bookObj.shelf === 'wantToRead'));\n      const read = books.filter(bookObj => \n                    (bookObj.shelf === 'read'));\n  \n      return {currentlyReading,wantToRead,read};\n    }\n\n\n    fetchBooks = () => {\n        BooksAPI.getAll()\n          .then(books => {\n                const {currentlyReading,wantToRead,read} = \n                                          App.categorizeBooks(books);\n                this.setState({\n                    books:books,\n                    currentlyReading:currentlyReading,\n                    wantToRead:wantToRead,\n                    read:read\n                });\n            }     \n         );\n    }\n\n  \n    componentDidMount() {\n        this.fetchBooks();     \n    }\n\n\n    updateShelfLocal = (bookObj,oldShelf,newShelf) => {\n\n        if (newShelf === 'none'){\n          this.setState((prevState) => ({\n                [oldShelf]:prevState[oldShelf].filter(book =>\n                                               book.id !== bookObj.id)\n            }));\n        }\n        else {\n            const [extractBook] = this.state[oldShelf].filter(book =>\n                                               book.id === bookObj.id);\n            extractBook.shelf = newShelf;\n\n            this.setState((prevState) => ({\n                [newShelf]:[...prevState[newShelf],extractBook],\n                [oldShelf]:prevState[oldShelf].filter(book => \n                                                  book.id !== bookObj.id)\n            }));\n        }\n      this.updateShelfOnly(bookObj,newShelf);\n    }\n\n\n    updateShelfOnly = (bookObj,shelf) => {\n      BooksAPI.update(bookObj,shelf)\n          .then(res => console.log(res));\n    }\n  \n    \n    updateShelfRemote = (bookObj,oldShelf,newShelf) => {  \n        this.updateShelfOnly(bookObj,newShelf);\n        \n        BooksAPI.get(bookObj.id)\n          .then(extractBook => {\n            extractBook.shelf = newShelf;\n            \n            this.setState(prevState => {\n              const newBooks = prevState.books.filter(book =>\n                    book.id !== bookObj.id).concat(extractBook);\n              \n                    const {currentlyReading,wantToRead,read} =\n                                    App.categorizeBooks(newBooks);\n                    return ({\n                      books:newBooks,\n                      currentlyReading:currentlyReading,\n                      wantToRead:wantToRead,\n                      read:read\n                    });\n            });\n          });\n    } \n\n\n    render(){\n        \n        const {books,currentlyReading,wantToRead,read} = this.state;\n    \n\n        return(\n            <div className = 'App'>\n\n              <Route exact path = '/' render = {() =>(\n                <div className='list-books'>\n\n                  <div className=\"list-books-title\">\n                      <h1>MyReads</h1>\n                  </div> \n                  \n                  <div className=\"list-books-content\">\n\n                    <div>\n                      <Shelf books = {currentlyReading} \n                       name = 'Currently Reading'\n                       onUpdateShelf = {this.updateShelfLocal} />\n\n                      <Shelf books = {wantToRead} \n                       name = 'Want to Read'\n                       onUpdateShelf = {this.updateShelfLocal} />\n\n                      <Shelf books = {read} \n                       name = 'Read'\n                       onUpdateShelf = {this.updateShelfLocal} />\n                     </div>\n                     \n                  </div>\n\n                  <div className=\"open-search\">\n                      <Link className=\"open-search\" to = '/search'>\n                        <button>\n                          Add Book\n                        </button>\n                      </Link>\n                  </div>\n\n                 </div>\n                )\n              } />\n\n\n              <Route path = '/search' render = {() => \n                <Search onUpdateShelf = {this.updateShelfRemote} \n                 existingBooks = {books} />\n              } />\n\n            </div>\n        );\n    }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter>,\n         document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}